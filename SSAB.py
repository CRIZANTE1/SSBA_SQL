import streamlit as st
import sys
import os
import logging

# --- Configura√ß√£o do Logging e Path ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
logger = logging.getLogger('abrangencia_app')
root_dir = os.path.dirname(os.path.abspath(__file__))
if root_dir not in sys.path:
    sys.path.append(root_dir)

# --- Importa√ß√µes do Sistema ---
from auth.login_page import show_login_page, show_user_header, show_logout_button
from auth.auth_utils import authenticate_user, get_user_role, get_user_display_name, get_user_email
from gdrive.matrix_manager import get_matrix_manager 

def configurar_pagina():
    """Define as configura√ß√µes globais da p√°gina Streamlit."""
    st.set_page_config(
        page_title="Abrang√™ncia | Gest√£o de Incidentes",
        page_icon="‚ö†Ô∏è",
        layout="wide",
        initial_sidebar_state="expanded"
    )

def show_request_access_form():
    """Exibe o formul√°rio para um novo usu√°rio solicitar acesso."""
    st.title("Solicita√ß√£o de Acesso")
    st.write(f"Ol√°, **{get_user_display_name()}** ({get_user_email()}).")
    st.info("Seu e-mail ainda n√£o foi autorizado a acessar o sistema. Por favor, preencha o formul√°rio abaixo para solicitar o acesso.")
    with st.form("request_access_form"):
        user_name = st.text_input("Seu nome completo", value=get_user_display_name())
        user_unit = st.text_input("Sua Unidade Operacional (UO)", placeholder="Ex: Unidade S√£o Paulo")
        submitted = st.form_submit_button("Enviar Solicita√ß√£o")
        if submitted:
            if not user_name or not user_unit:
                st.error("Por favor, preencha todos os campos.")
            else:
                matrix_manager = get_matrix_manager()
                if matrix_manager.add_access_request(get_user_email(), user_name, user_unit):
                    st.session_state.access_status = "pending"
                    st.rerun()
                else:
                    st.error("Ocorreu um erro ao enviar sua solicita√ß√£o. Tente novamente mais tarde.")

def main():
    """Fun√ß√£o principal que atua como roteador da aplica√ß√£o."""
    configurar_pagina()

    # --- Bloco de Autentica√ß√£o ---
    if not show_login_page():
        return

    is_authorized = authenticate_user()

    # <<< MUDAN√áA IMPORTANTE: O bot√£o de logout agora fica na sidebar para todas as telas de "n√£o autorizado" >>>
    if not is_authorized:
        access_status = st.session_state.get('access_status')
        if access_status == "pending":
            st.title("Acesso Pendente")
            st.success("Sua solicita√ß√£o de acesso foi recebida e est√° aguardando aprova√ß√£o.")
        elif access_status == "unauthorized":
            show_request_access_form()
        
        # Coloca o bot√£o de logout na sidebar, que ainda est√° vis√≠vel
        with st.sidebar:
            show_logout_button()
        return

    # --- Defini√ß√£o das P√°ginas ---
    user_role = get_user_role()

    pages = {
        "Menu Principal": [
            st.Page("pages/dashboard_page.py", title="Consultar Abrang√™ncia", icon="üóÇÔ∏è", default=True),
            st.Page("pages/plano_acao_page.py", title="Plano de A√ß√£o", icon="üìã"),
        ]
    }

    if user_role == 'admin':
        pages["Configura√ß√µes"] = [
            st.Page("pages/admin_page.py", title="Administra√ß√£o", icon="‚öôÔ∏è")
        ]

    # --- Cria√ß√£o da Navega√ß√£o no TOPO da p√°gina ---
    pg = st.navigation(pages, position="top")
    
    # --- Conte√∫do da Sidebar (agora separada da navega√ß√£o) ---
    with st.sidebar:
        show_user_header()
        st.divider()
        # Adicione aqui outros filtros ou informa√ß√µes que voc√™ queira que sejam persistentes
        st.info("Filtros globais ou outras informa√ß√µes podem ser adicionados aqui.")
        st.divider()
        show_logout_button()

    # --- Execu√ß√£o da P√°gina Selecionada ---
    st.header(pg.title)
    logger.info(f"Usu√°rio '{get_user_email()}' executando a p√°gina: {pg.title}")
    pg.run()


if __name__ == "__main__":
    main()
